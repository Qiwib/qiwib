# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_space', [dirname(__file__)])
        except ImportError:
            import _space
            return _space
        if fp is not None:
            try:
                _mod = imp.load_module('_space', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _space = swig_import_helper()
    del swig_import_helper
else:
    import _space
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _space.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _space.SwigPyIterator_value(self)
    def incr(self, n = 1): return _space.SwigPyIterator_incr(self, n)
    def decr(self, n = 1): return _space.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _space.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _space.SwigPyIterator_equal(self, *args)
    def copy(self): return _space.SwigPyIterator_copy(self)
    def next(self): return _space.SwigPyIterator_next(self)
    def __next__(self): return _space.SwigPyIterator___next__(self)
    def previous(self): return _space.SwigPyIterator_previous(self)
    def advance(self, *args): return _space.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _space.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _space.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _space.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _space.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _space.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _space.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _space.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class vectord(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectord, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectord, name)
    __repr__ = _swig_repr
    def iterator(self): return _space.vectord_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _space.vectord___nonzero__(self)
    def __bool__(self): return _space.vectord___bool__(self)
    def __len__(self): return _space.vectord___len__(self)
    def pop(self): return _space.vectord_pop(self)
    def __getslice__(self, *args): return _space.vectord___getslice__(self, *args)
    def __setslice__(self, *args): return _space.vectord___setslice__(self, *args)
    def __delslice__(self, *args): return _space.vectord___delslice__(self, *args)
    def __delitem__(self, *args): return _space.vectord___delitem__(self, *args)
    def __getitem__(self, *args): return _space.vectord___getitem__(self, *args)
    def __setitem__(self, *args): return _space.vectord___setitem__(self, *args)
    def append(self, *args): return _space.vectord_append(self, *args)
    def empty(self): return _space.vectord_empty(self)
    def size(self): return _space.vectord_size(self)
    def clear(self): return _space.vectord_clear(self)
    def swap(self, *args): return _space.vectord_swap(self, *args)
    def get_allocator(self): return _space.vectord_get_allocator(self)
    def begin(self): return _space.vectord_begin(self)
    def end(self): return _space.vectord_end(self)
    def rbegin(self): return _space.vectord_rbegin(self)
    def rend(self): return _space.vectord_rend(self)
    def pop_back(self): return _space.vectord_pop_back(self)
    def erase(self, *args): return _space.vectord_erase(self, *args)
    def __init__(self, *args): 
        this = _space.new_vectord(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _space.vectord_push_back(self, *args)
    def front(self): return _space.vectord_front(self)
    def back(self): return _space.vectord_back(self)
    def assign(self, *args): return _space.vectord_assign(self, *args)
    def resize(self, *args): return _space.vectord_resize(self, *args)
    def insert(self, *args): return _space.vectord_insert(self, *args)
    def reserve(self, *args): return _space.vectord_reserve(self, *args)
    def capacity(self): return _space.vectord_capacity(self)
    __swig_destroy__ = _space.delete_vectord
    __del__ = lambda self : None;
vectord_swigregister = _space.vectord_swigregister
vectord_swigregister(vectord)

class vectorc(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorc, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorc, name)
    __repr__ = _swig_repr
    def iterator(self): return _space.vectorc_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _space.vectorc___nonzero__(self)
    def __bool__(self): return _space.vectorc___bool__(self)
    def __len__(self): return _space.vectorc___len__(self)
    def pop(self): return _space.vectorc_pop(self)
    def __getslice__(self, *args): return _space.vectorc___getslice__(self, *args)
    def __setslice__(self, *args): return _space.vectorc___setslice__(self, *args)
    def __delslice__(self, *args): return _space.vectorc___delslice__(self, *args)
    def __delitem__(self, *args): return _space.vectorc___delitem__(self, *args)
    def __getitem__(self, *args): return _space.vectorc___getitem__(self, *args)
    def __setitem__(self, *args): return _space.vectorc___setitem__(self, *args)
    def append(self, *args): return _space.vectorc_append(self, *args)
    def empty(self): return _space.vectorc_empty(self)
    def size(self): return _space.vectorc_size(self)
    def clear(self): return _space.vectorc_clear(self)
    def swap(self, *args): return _space.vectorc_swap(self, *args)
    def get_allocator(self): return _space.vectorc_get_allocator(self)
    def begin(self): return _space.vectorc_begin(self)
    def end(self): return _space.vectorc_end(self)
    def rbegin(self): return _space.vectorc_rbegin(self)
    def rend(self): return _space.vectorc_rend(self)
    def pop_back(self): return _space.vectorc_pop_back(self)
    def erase(self, *args): return _space.vectorc_erase(self, *args)
    def __init__(self, *args): 
        this = _space.new_vectorc(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _space.vectorc_push_back(self, *args)
    def front(self): return _space.vectorc_front(self)
    def back(self): return _space.vectorc_back(self)
    def assign(self, *args): return _space.vectorc_assign(self, *args)
    def resize(self, *args): return _space.vectorc_resize(self, *args)
    def insert(self, *args): return _space.vectorc_insert(self, *args)
    def reserve(self, *args): return _space.vectorc_reserve(self, *args)
    def capacity(self): return _space.vectorc_capacity(self)
    __swig_destroy__ = _space.delete_vectorc
    __del__ = lambda self : None;
vectorc_swigregister = _space.vectorc_swigregister
vectorc_swigregister(vectorc)

class realgrid(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, realgrid, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, realgrid, name)
    __repr__ = _swig_repr
    __swig_setmethods__["xmin"] = _space.realgrid_xmin_set
    __swig_getmethods__["xmin"] = _space.realgrid_xmin_get
    if _newclass:xmin = _swig_property(_space.realgrid_xmin_get, _space.realgrid_xmin_set)
    __swig_setmethods__["xmax"] = _space.realgrid_xmax_set
    __swig_getmethods__["xmax"] = _space.realgrid_xmax_get
    if _newclass:xmax = _swig_property(_space.realgrid_xmax_get, _space.realgrid_xmax_set)
    __swig_setmethods__["dx"] = _space.realgrid_dx_set
    __swig_getmethods__["dx"] = _space.realgrid_dx_get
    if _newclass:dx = _swig_property(_space.realgrid_dx_get, _space.realgrid_dx_set)
    __swig_setmethods__["Nx"] = _space.realgrid_Nx_set
    __swig_getmethods__["Nx"] = _space.realgrid_Nx_get
    if _newclass:Nx = _swig_property(_space.realgrid_Nx_get, _space.realgrid_Nx_set)
    def __init__(self, xmin = 0, xmax = 1, Nx = 1): 
        this = _space.new_realgrid(xmin, xmax, Nx)
        try: self.this.append(this)
        except: self.this = this
    def integrate(self, *args): return _space.realgrid_integrate(self, *args)
    def inner(self, *args): return _space.realgrid_inner(self, *args)
    def derivative(self, *args): return _space.realgrid_derivative(self, *args)
    __swig_destroy__ = _space.delete_realgrid
    __del__ = lambda self : None;
realgrid_swigregister = _space.realgrid_swigregister
realgrid_swigregister(realgrid)

class complexgrid(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, complexgrid, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, complexgrid, name)
    __repr__ = _swig_repr
    __swig_setmethods__["xmin"] = _space.complexgrid_xmin_set
    __swig_getmethods__["xmin"] = _space.complexgrid_xmin_get
    if _newclass:xmin = _swig_property(_space.complexgrid_xmin_get, _space.complexgrid_xmin_set)
    __swig_setmethods__["xmax"] = _space.complexgrid_xmax_set
    __swig_getmethods__["xmax"] = _space.complexgrid_xmax_get
    if _newclass:xmax = _swig_property(_space.complexgrid_xmax_get, _space.complexgrid_xmax_set)
    __swig_setmethods__["dx"] = _space.complexgrid_dx_set
    __swig_getmethods__["dx"] = _space.complexgrid_dx_get
    if _newclass:dx = _swig_property(_space.complexgrid_dx_get, _space.complexgrid_dx_set)
    __swig_setmethods__["Nx"] = _space.complexgrid_Nx_set
    __swig_getmethods__["Nx"] = _space.complexgrid_Nx_get
    if _newclass:Nx = _swig_property(_space.complexgrid_Nx_get, _space.complexgrid_Nx_set)
    def __init__(self, xmin = 0, xmax = 1, Nx = 1): 
        this = _space.new_complexgrid(xmin, xmax, Nx)
        try: self.this.append(this)
        except: self.this = this
    def integrate(self, *args): return _space.complexgrid_integrate(self, *args)
    def inner(self, *args): return _space.complexgrid_inner(self, *args)
    def derivative(self, *args): return _space.complexgrid_derivative(self, *args)
    __swig_destroy__ = _space.delete_complexgrid
    __del__ = lambda self : None;
complexgrid_swigregister = _space.complexgrid_swigregister
complexgrid_swigregister(complexgrid)

class realfunction(vectord):
    __swig_setmethods__ = {}
    for _s in [vectord]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, realfunction, name, value)
    __swig_getmethods__ = {}
    for _s in [vectord]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, realfunction, name)
    __repr__ = _swig_repr
    def __iadd__(self, *args): return _space.realfunction___iadd__(self, *args)
    def __isub__(self, *args): return _space.realfunction___isub__(self, *args)
    def __imul__(self, *args): return _space.realfunction___imul__(self, *args)
    def __add__(self, *args): return _space.realfunction___add__(self, *args)
    def __sub__(self, *args): return _space.realfunction___sub__(self, *args)
    def __mul__(self, *args): return _space.realfunction___mul__(self, *args)
    def __init__(self, *args): 
        this = _space.new_realfunction(*args)
        try: self.this.append(this)
        except: self.this = this
    def get_data(self): return _space.realfunction_get_data(self)
    __swig_destroy__ = _space.delete_realfunction
    __del__ = lambda self : None;
realfunction_swigregister = _space.realfunction_swigregister
realfunction_swigregister(realfunction)

class complexfunction(vectorc):
    __swig_setmethods__ = {}
    for _s in [vectorc]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, complexfunction, name, value)
    __swig_getmethods__ = {}
    for _s in [vectorc]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, complexfunction, name)
    __repr__ = _swig_repr
    def __iadd__(self, *args): return _space.complexfunction___iadd__(self, *args)
    def __isub__(self, *args): return _space.complexfunction___isub__(self, *args)
    def __imul__(self, *args): return _space.complexfunction___imul__(self, *args)
    def __add__(self, *args): return _space.complexfunction___add__(self, *args)
    def __sub__(self, *args): return _space.complexfunction___sub__(self, *args)
    def __mul__(self, *args): return _space.complexfunction___mul__(self, *args)
    def __init__(self, *args): 
        this = _space.new_complexfunction(*args)
        try: self.this.append(this)
        except: self.this = this
    def get_data(self): return _space.complexfunction_get_data(self)
    __swig_destroy__ = _space.delete_complexfunction
    __del__ = lambda self : None;
complexfunction_swigregister = _space.complexfunction_swigregister
complexfunction_swigregister(complexfunction)

# This file is compatible with both classic and new-style classes.


